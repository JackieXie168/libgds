# ===================================================================
# Release script for libgds/cbgp: release functions
# Last modified: 08/11/2006 (bqu)
# ===================================================================

declare -a CONF_OPTIONS
declare -r LINE="--------------------------------\
	-------------------------------------"

# -----[ info ]------------------------------------------------------
info()
{
    local MSG=$1
    echo -e "\033[1m$MSG\033[0m"
}

# -----[ info_part ]-------------------------------------------------
info_part()
{
    local MSG=$1
    echo $LINE
    echo -e "*** \033[33;1m$MSG\033[0m ***"
    echo $LINE
}

# -----[ error ]-----------------------------------------------------
error()
{
    local MSG=$1
    echo -e "ERROR: \033[1;31m$MSG\033[0m"
    echo "Aborting..."
    exit -1
}

# -----[ error_skip ]------------------------------------------------
error_skip()
{
    local MSG=$1
    echo "ERROR: $MSG"
    echo "Skipping..."
}

# -----[ read_yes_no ]-----------------------------------------------
# Params:
#   $1 -> Prompt message
#   $2 -> Default value (must be one of "y", "Y", "n" or "N")
#
# Return value:
#   in variable READ_YES_NO_RESULT (will be one of "y" or "n")
# -------------------------------------------------------------------
read_yes_no()
{
    local MSG=$1
    local DEFAULT=$2
    local PROMPT

    # Check that default value is either "Y" or "N"
    if [ ! -z "$DEFAULT" ]; then
	DEFAULT=`echo $DEFAULT | tr "A-Z" "a-z"`
	if [ $DEFAULT = "y" ]; then
	    PROMPT="$MSG [Y/n] "
	else
	    if [ "$DEFAULT" = "n" ]; then
		PROMPT="$MSG [y/N] "
	    else
		echo "ERROR: read_yes_no(), invalid DEFAULT value"
		exit -1
	    fi
	fi
    else
	PROMPT="$MSG "
    fi

    declare -i ERROR
    ERROR=1
    while [ $ERROR -eq 1 ]; do
	ERROR=0
	read -e -p "$PROMPT" ANSWER
	if [ $? != 0 ]; then
	    ERROR=1
	    echo ""
	    continue
	fi
	if [ -z "$ANSWER" ]; then
	    if [ ! -z "$DEFAULT" ]; then
		ANSWER="$DEFAULT"
	    else
		ERROR=1
		continue
	    fi
	else
	    ANSWER=`echo "$ANSWER" | tr "A-Z" "a-z"`
	    if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "n" ]; then
		echo "invalid input: \"$ANSWER\""
		ERROR=1
	    fi
	fi
    done
    READ_YES_NO_RESULT="$ANSWER"
}


#####################################################################
#
# Parameters/status checking function
#
#####################################################################

# -----[ check_release_info ]----------------------------------------
check_release_info()
{
    info "Checking release information..."
    echo "  module : $MODULE"
    echo "  version: $VERSION"
    if [ $RELEASE_MODE -eq 1 ]; then
	echo "  release: major"
    else
	if [ $RELEASE_MODE -eq 0 ]; then
	    echo "  release: minor"
	else
	    error "invalid release mode ($RELEASE_MODE)"
	fi
    fi
    if [ -z "$VERSION" ]; then
	error "release version is not defined."
    fi
}

# -----[ check_project_version ]-------------------------------------
check_project_version()
{
    info "Checking release/project versions..."
    local PROJECT_VERSION=`grep "AC_INIT" configure.in | sed 's:^AC_INIT(.*\[\(.*\)\],.*\[\(.*\)\])$:\2:'`
    echo "  project: $PROJECT_VERSION (from configure.in)"
    if [ "$VERSION" != "$PROJECT_VERSION" ]; then
	error "release/project versions mismatch."
    fi

    # Additional check if a library version is provided
    if [ ! -z "$LIBRARY_VERSION" ]; then
	info "Checking project/library versions..."
	echo "  library: $LIBRARY_VERSION"
	local PROJECT_VERSION_SHORT=`echo "$PROJECT_VERSION" | sed 's:^\([0-9]*\.[0-9]*\).*$:\1:'`
	echo "  project: $PROJECT_VERSION_SHORT"
	if [ "$PROJECT_VERSION_SHORT" != "$LIBRARY_VERSION" ]; then
	    error "project/library versions mismatch."
	fi
    fi
}


#####################################################################
#
# Build functions
#
#####################################################################

# -----[ check_build ]-----------------------------------------------
check_build()
{
    local OPTIONS
    info "Checking build..."
    for (( i= ${#CONF_OPTIONS[*]}-1 ; $i >= 0 ; i-- )) do
	OPTIONS="${CONF_OPTIONS[$i]}"
	check_configure "$OPTIONS"
	check_compilation
	check_validation
    done
}

# -----[ check_configure ]-------------------------------------------
check_configure()
{
    local CONF_OPTIONS=$1
    info "+ Checking configure $CONF_OPTIONS..."
    if [ $BUILD -eq 1 ]; then
	eval "./configure $CONF_OPTIONS_COMMON $CONF_OPTIONS $REDIRECT"
	if [ $? != 0 ]; then
	    error "failed to configure."
	fi
    else
	echo "    skipped"
    fi
}

# -----[ check_compilation ]-----------------------------------------
check_compilation()
{
    info "+ Checking compilation..."
    if [ $BUILD -eq 1 ]; then
	eval "make clean $REDIRECT"
	if [ $? != 0 ]; then
	    error "compilation failed (make clean)."
	fi
	eval "make $REDIRECT"
	if [ $? != 0 ]; then
	    error "compilation failed (make)."
	fi
    else
	echo "    skipped"
    fi
}

# -----[ make_dist ]-------------------------------------------------
make_dist() {
    info "Building distribution..."
    eval "make dist $REDIRECT"
    if [ $? != 0 ]; then
	error "unable to build distribution (make dist)."
    fi
}


#####################################################################
#
# Validation functions
#
#####################################################################

# -----[ check_validation ]------------------------------------------
check_validation()
{
    if [ ! -z "$VALID_EXEC" ]; then
	info "+ Checking validation..."
	eval "$VALID_EXEC $REDIRECT"
	if [ $? != 0 ]; then
	    error "validation failed."
	fi
    fi
}


#####################################################################
#
# CVS functions
#
#####################################################################

# -----[ check_cvs_status ]------------------------------------------
check_cvs_status()
{
    info "Checking CVS status..."
    local CVS_STATUS=`cvs status 2>/dev/null | grep -i 'Status\:'`
    if [ $? != 0 ]; then
	error "could not get CVS status"
    fi
    local CVS_STATUS_MODIFIED=`echo -e "$CVS_STATUS" | grep -v 'release.sh' | grep -v -i 'Up-to-date'`
    if [ ! -z "$CVS_STATUS_MODIFIED" ]; then
	echo -e "$CVS_STATUS_MODIFIED"
	error "commit/update is needed before release"
    fi
}

# -----[ cvs_branch ]------------------------------------------------
cvs_branch()
{
    local BRANCH_NAME=`echo $1 | tr "$,.:;@" "______"`
    info "Creating a CVS branch..."
    echo "  branch: \"$BRANCH_NAME\""
    eval "cvs tag -b $BRANCH_NAME $REDIRECT"
    if [ $? != 0 ]; then
	error "unable to create branch \"$BRANCH_NAME\""
    fi
}

# -----[ cvs_tag ]---------------------------------------------------
cvs_tag()
{
    local TAG_NAME=`echo $1 | tr "$,.:;@" "______"`
    info "Creating a CVS tag..."
    echo "  tag: \"$TAG_NAME\""
    eval "cvs tag $TAG_NAME $REDIRECT"
    if [ $? != 0 ]; then
	error "unable to create tag \"$TAG_NAME\""
    fi
}


#####################################################################
#
# SVN functions
#
#####################################################################

# -----[ check_svn_status ]------------------------------------------
check_svn_status()
{
    info "Checking SVN status..."
    local SVN_STATUS=`svn status -uvq`
    if [ $? != 0 ]; then
	error "could not get SVN status"
    fi
    local SVN_STATUS_MODIFIED=`echo -e "$SVN_STATUS" | grep -v 'release.sh' | grep -v -E '^Status against revision' | grep -E '^[^ ]'`
    if [ ! -z "$SVN_STATUS_MODIFIED" ]; then
	echo -e "$SVN_STATUS_MODIFIED"
	error "commit/update is needed before release"
    fi
}

# -----[ svn_branch ]------------------------------------------------
svn_branch()
{
    local BRANCH_NAME=$1
    info "Creating a SVN branch"
    echo "  branch: $BRANCH_NAME"
    svn copy $SVN_URL/trunk $SVN_URL/branches/$VERSION \
	-m "Creating release branch \"$VERSION\""
    if [ $? != 0 ]; then
	error "unable to create branch \"branches/$VERSION\""
    fi
}

# -----[ svn_tag ]---------------------------------------------------
svn_tag()
{
    local TAG_NAME=$1
    info "Creating a SVN tag"
    echo "  tag: $TAG_NAME"
    svn copy $SVN_URL/trunk $SVN_URL/tags/release-$VERSION \
        -m "Creating release tag \"release-$VERSION\""
    if [ $? != 0 ]; then
        error "unable to create tag \"tags/release-$VERSION\""
    fi
}


#####################################################################
#
# SOURCE RELEASE SPECIFIC FUNCTIONS
#
#####################################################################

# -----[ src_release_check_parameters ]------------------------------
src_release_check_parameters()
{
    info "Checking parameters..."
    if [ -z "$MODULE" ]; then
	error "MODULE variable not defined."
    fi
    if [ -z "$MAIN_VERSION" ]; then
	error "MAIN_VERSION variable not defined."
    fi
    if [ -z "$RELEASE_VERSION" ]; then
	error "RELEASE_VERSION variable not defined."
    fi
    if [ -z "$BUILD_VERSION" ]; then
	error "BUILD_VERSION variable not defined."
    fi
    if [ -z "$VERSION" ]; then
	error "VERSION variable not defined."
    fi
    if [ -z "$VC" ]; then
	error "VC variable not defined."
    fi
    if [ "$VC" != "cvs" ] && [ "$VC" != "svn" ]; then
	error "VC variable must contain \"cvs\" or \"svn\"."
    fi
    if [ "$VC" = "svn" ]; then
	if [ -z "$SVN_URL" ]; then
	    error "no SVN URL specified."
	fi
    fi
    if [ $PUBLISH -eq 1 ]; then
	if [ -z "$PUBLISH_URL" ]; then
	    error "publication URL not specified."
	fi
	if [ -z "$PUBLISH_FILES" ]; then
	    error "no list of files to be published."
	fi
    fi
    if [ $RELEASE_VERSION -eq 0 ]; then
	RELEASE_MODE=1 # Major
    else
	RELEASE_MODE=0 # Minor
    fi
}

# -----[ src_release_parse_arguments ]-------------------------------
src_release_parse_arguments()
{
    local ARGS=$@

    info "Parsing arguments..."
    for arg in $ARGS; do
	case $arg in
	-doit)
            TEST_ONLY=0;
            echo "  Release activated (-doit).";
            ;;
	-no-build)
	    BUILD=0;
	    echo "  Build is disabled (-no-build).";
	    ;;
	-no-release)
            RELEASE=0;
	    echo "  Release is disabled (-no-release).";
	    ;;
	-verbose)
            VERBOSE=1;
	    REDIRECT=""
	    echo "  Verbose mode (-verbose).";
	    ;;
        -publish)
	    PUBLISH=1
	    echo "  Publication activated (-publish)."
	    ;;
	*)
	    error "invalid argument [ $arg ]"
	    ;;
	esac
    done
}

# -----[ Perform a source release ]----------------------------------
# This function should be called by the release.sh script. The syntax
# should be as follows:
#
#   make_release $@
#
# -------------------------------------------------------------------
make_release()
{
    local ARGS=$@

    local RELEASE_TIME=`date +'%d%m%Y-%H%M%S'`

    declare REDIRECT=">/tmp/src-release-$TIME.log 2>&1"
    declare -i BUILD=1
    declare -i PUBLISH=0
    declare -i RELEASE=1
    declare -i TEST_ONLY=1
    declare -i VERBOSE=0

    src_release_parse_arguments $ARGS
    src_release_check_parameters

    # ===================================================================
    # Part I. Checking status
    # ===================================================================
    info_part "I. Checking status"
    check_release_info
    if [ "$VC" = "cvs" ]; then
	check_cvs_status
    else
	check_svn_status
    fi
    check_project_version
    check_build;
    if [ $TEST_ONLY -eq 1 ]; then
	read_yes_no "Build release ?" "N"
	if [ "$READ_YES_NO_RESULT" = "y" ]; then
	    TEST_ONLY=0
	else
	    echo "WARNING: script was run in test-only mode."
	    echo "Stop"
	    exit 0
	fi
    fi


    # ===================================================================
    # Part II. Building release
    # ===================================================================
    info_part "II. Building release"
    if [ $RELEASE -eq 1 ]; then
	info "Building the release"
	if [ $RELEASE_MODE -eq 0 ]; then
	    echo "  mode: minor release"
            # -----------------------------------------------------------
            # Create tag
            # -----------------------------------------------------------
	    if [ "$VC" = "cvs" ]; then
		cvs_tag "release-$VERSION"
	    else
		svn_tag "release-$VERSION"
	    fi
	
	else
	    if [ $RELEASE_MODE -eq 1]; then
		echo "  mode: major release"
                # -----------------------------------------------------------
                # Create branch
                # -----------------------------------------------------------
		if [ "$VC" = "cvs" ]; then
		    cvs_branch "$VERSION"
		else
		    svn_branch "$VERSION"
		fi
                # -----------------------------------------------------------
                # Create tag
                # -----------------------------------------------------------
		if [ "$VC" = "cvs" ]; then
		    cvs_tag "$release-$VERSION"
		else
		    svn_tag "$release-$VERSION"
		fi
	    fi
	fi
    fi
    make_dist


    # ===================================================================
    # Part III. Publish distribution
    # ===================================================================
    if [ ! $PUBLISH -eq 1 ]; then
	read_yes_no "Publish package ?" "Y"
	if [ "$READ_YES_NO_RESULT" = "y" ]; then
	    PUBLISH=1
	fi
    fi
    if [ $PUBLISH -eq 1 ]; then
	info_part "III. Publishing release"
	echo "Publishing distribution"
	for f in $PUBLISH_FILES; do
	    scp -C $f $PUBLISH_URL
	done
	if [ $? != 0 ]; then
	    error "could not publish distribution"
	fi
    fi

    # ===============================================================
    # Part IV. Display last recommendations
    # ===============================================================
    echo "***** Last recommendations *****"
    echo "Do not forget"
    echo "- to build the packages (.rpm, .deb, ...)"
    echo "- to send an e-mail to the mailing-list"
    echo "- do not forget to announce the new release on the web site"
    echo "********************************"
}
